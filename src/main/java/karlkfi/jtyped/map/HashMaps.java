package karlkfi.jtyped.map;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Nonnull;

public class HashMaps {

	/**
	 * Returns an empty hash map.
	 */
	public static <K,V> HashMap<K,V> of() {
		return new HashMap<K,V>();
	}

	/**
	 * Returns a hash map containing a single entry. 
	 */
	public static <K,V> HashMap<K,V> of(K k1, V v1) {
		HashMap<K,V> map = new HashMap<K,V>();
		map.put(k1, v1);
		return map;
	}

	/**
	 * Returns a hash map containing the given entries, in order.
	 */
	public static <K,V> HashMap<K,V> of(K k1, V v1, K k2, V v2) {
		HashMap<K,V> map = new HashMap<K,V>();
		map.put(k1, v1);
		map.put(k2, v2);
		return map;
	}

	/**
	 * Returns a hash map containing the given entries, in order.
	 */
	public static <K,V> HashMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3) {
		HashMap<K,V> map = new HashMap<K,V>();
		map.put(k1, v1);
		map.put(k2, v2);
		map.put(k3, v3);
		return map;
	}

	/**
	 * Returns a hash map containing the given entries, in order.
	 */
	public static <K,V> HashMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) {
		HashMap<K,V> map = new HashMap<K,V>();
		map.put(k1, v1);
		map.put(k2, v2);
		map.put(k3, v3);
		map.put(k4, v4);
		return map;
	}

	/**
	 * Returns a hash map containing the given entries, in order.
	 */
	public static <K,V> HashMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5) {
		HashMap<K,V> map = new HashMap<K,V>();
		map.put(k1, v1);
		map.put(k2, v2);
		map.put(k3, v3);
		map.put(k4, v4);
		map.put(k5, v5);
		return map;
	}

	// looking for of() with > 5 entries? Use the builder instead.

	/**
	 * Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder}
	 * constructor.
	 */
	@Nonnull
	public static <K,V> Builder<K,V> builder() {
		return new Builder<K,V>();
	}
	
	public static class Builder<K,V> {
		final HashMap<K,V> builder = new HashMap<K,V>();

		/**
		 * Creates a new builder. The returned builder is equivalent to the builder generated by
		 * {@link HashMaps#builder()}.
		 */
		public Builder() {
		}

		/**
		 * Associates the {@code key} with the {@code value} in the built map. 
		 */
		public Builder<K,V> put(K key, V value) {
			builder.put(key, value);
			return this;
		}

		/**
		 * Associates all of the given map's keys and values in the built map.
		 */
		public Builder<K,V> putAll(Map<? extends K, ? extends V> map) {
			builder.putAll(map);
			return this;
		}

		/**
		 * Returns a newly-created hash map.
		 */
		public HashMap<K,V> build() {
			return new HashMap<K,V>(builder);
		}

	}
	
}
